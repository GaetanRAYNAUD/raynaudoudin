// Generated by dia2code
#ifndef STATE__BOARD__H
#define STATE__BOARD__H

#include <map>
#include <memory>
#include <vector>
#include <string>

namespace state {
  class Board;
  class Unit;
  class Team;
  class Terrain;
  class Observable;
}

#include "Unit.h"
#include "UnitTypeId.h"
#include "TeamId.h"
#include "Direction.h"
#include "Observable.h"
#include "Team.h"
#include "Terrain.h"
#include "RaceTypeId.h"

namespace state {

  /// class Board - 
  class Board : public state::Observable {
    // Associations
    // Attributes
  protected:
    /// 	
    int width;
    int height;
    std::map<TeamId, std::unique_ptr<Team>> teams;
    std::map<int, std::unique_ptr<Terrain>> terrains;
    std::map<int, std::unique_ptr<Unit>> units;
    int idTerrain;
    int idUnit;
    // Operations
  public:
    Board (int width = 10, int height = 10);
    Board (const Board& other);
    Board& operator= (const Board& other);
    ~Board ();
    void addUnit (Unit* unit);
    void addUnit (std::unique_ptr<Unit> unit, int idUnit);
    void createNewUnit (UnitTypeId unitTypeId, TeamId team, int x, int y);
    /// 	
    /// @param team		(???) 
    void addTeam (Team* team);
    /// 		
    /// @param terrain		(???) 
    void addTerrain (Terrain* terrain);
    void deleteUnit (int id);
    bool isLeaderNotAlive (TeamId teamId) const;
    bool isUnitAround (int idAttacker, int idDefender) const;
    bool isUnitOnPosition (int x, int y) const;
    Unit* findUnit (int id) const;
    Team* findTeam (TeamId id) const;
    /// 		
    /// @param id		(???) 
    Terrain* findTerrain (int id) const;
    std::vector<int> findIdUnitsAround (int id) const;
    std::vector<Unit*> findUnitsAround (int id);
    Unit* findUnitOnPosition (int positionX, int positionY) const;
    std::vector<int> findIdTerrainsAround (int id) const;
    std::vector<Terrain*> findTerrainsAround (int id) const;
    Terrain* findTerrainOnPosition (int positionX, int positionY) const;
    Terrain* findTerrainOnPosition (int positionX, int positionY, Direction direction) const;
    std::vector<Direction> directionAvailable (int unitId) const;
    std::vector<Direction> directionAvailable (int x, int y) const;
    Direction getDirectionFromTerrains (Terrain* startingTerrain, Terrain* targetTerrain);
    void moveUnit (int id, Direction direction);
    void claimHouse (TeamId teamId, int x, int y);
    void endTurn (TeamId currentTeam);
    void loadTerrainsFromFile (std::string path);
    bool equals (const Board& other) const;
    // Setters and Getters
    int getWidth() const;
    void setWidth(int width);
    int getHeight() const;
    void setHeight(int height);
    const std::map<TeamId, std::unique_ptr<Team>>& getTeams() const;
    void setTeams(const std::map<TeamId, std::unique_ptr<Team>>& teams);
    const std::map<int, std::unique_ptr<Terrain>>& getTerrains() const;
    void setTerrains(const std::map<int, std::unique_ptr<Terrain>>& terrains);
    const std::map<int, std::unique_ptr<Unit>>& getUnits() const;
    void setUnits(const std::map<int, std::unique_ptr<Unit>>& units);
    int getIdTerrain() const;
    void setIdTerrain(int idTerrain);
    int getIdUnit() const;
    void setIdUnit(int idUnit);
  };

};

#endif
