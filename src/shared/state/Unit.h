// Generated by dia2code
#ifndef STATE__UNIT__H
#define STATE__UNIT__H

#include <map>
#include <memory>

namespace state {
  class Unit;
  class Weapon;
}

#include "UnitTypeId.h"
#include "Weapon.h"

namespace state {

  /// class Unit - 
  class Unit {
    // Associations
    // Attributes
  protected:
    int id     = 0;
    int life     = 50;
    int speed     = 5;
    int positionX;
    int positionY;
    int team;
    std::map<int, std::unique_ptr<Weapon>> weapons;
    UnitTypeId typeId     = UnitTypeId::INVALIDUNIT;
    // Operations
  public:
    Unit ();
    Unit (const Unit& other);
    Unit& operator= (const Unit& other);
    virtual ~Unit ();
    bool isDead () const;
    const int& getPositionX () const;
    const int& getPositionY () const;
    const int& getLife () const;
    const int& getSpeed () const;
    const UnitTypeId& getTypeId () const;
    static const int getPrice (UnitTypeId typeId);
    const int& getId () const;
    const int& getTeam () const;
    void setSpeed (int speed);
    virtual Unit* clone () const = 0;
    // Setters and Getters
    void setId(int id);
    void setLife(int life);
    void setPositionX(int positionX);
    void setPositionY(int positionY);
    void setTeam(int team);
    const std::map<int, std::unique_ptr<Weapon>>& getWeapons() const;
    void setWeapons(const std::map<int, std::unique_ptr<Weapon>>& weapons);
    void setTypeId(UnitTypeId typeId);
  };

};

#endif
