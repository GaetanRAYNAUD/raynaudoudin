// Generated by dia2code
#ifndef AI__DEEPAI__H
#define AI__DEEPAI__H

#include <random>
#include <stack>
#include <memory>

namespace ai {
  class PathMap;
};
namespace engine {
  class Engine;
};
namespace state {
  class State;
};
namespace ai {
  class AI;
}

#include "PathMap.h"
#include "AI.h"

namespace ai {

  /// class DeepAI - 
  class DeepAI : public ai::AI {
    // Associations
    // Attributes
  protected:
    PathMap unitTeam1PathMap;
    PathMap unitTeam2PathMap;
    PathMap houseTeam1PathMap;
    PathMap houseTeam2PathMap;
    PathMap castlePathMap;
    int maxDepth     = 6;
    int maxUpdates     = 5000;
    int maxLeaves     = 5;
    int updatesCount     = 0;
    std::mt19937 randgen;
    // Operations
  public:
    DeepAI (int randomSeed);
    int minimax_rec_min (engine::Engine& engine, int depth);
    int minimax_rec_max (engine::Engine& engine, int depth);
    void minimax_max_init (engine::Engine& engine, int depth, std::stack<std::stack<std::shared_ptr<engine::Action>>> bestActions);
    int getHeuristic (const state::State& state);
    void stateChanged (const state::Event& event);
    void run (engine::Engine& engine);
    // Setters and Getters
    const PathMap& getUnitTeam1PathMap() const;
    void setUnitTeam1PathMap(const PathMap& unitTeam1PathMap);
    const PathMap& getUnitTeam2PathMap() const;
    void setUnitTeam2PathMap(const PathMap& unitTeam2PathMap);
    const PathMap& getHouseTeam1PathMap() const;
    void setHouseTeam1PathMap(const PathMap& houseTeam1PathMap);
    const PathMap& getHouseTeam2PathMap() const;
    void setHouseTeam2PathMap(const PathMap& houseTeam2PathMap);
    const PathMap& getCastlePathMap() const;
    void setCastlePathMap(const PathMap& castlePathMap);
    int getMaxDepth() const;
    void setMaxDepth(int maxDepth);
    int getMaxUpdates() const;
    void setMaxUpdates(int maxUpdates);
    int getMaxLeaves() const;
    void setMaxLeaves(int maxLeaves);
    int getUpdatesCount() const;
    void setUpdatesCount(int updatesCount);
    const std::mt19937& getRandgen() const;
    void setRandgen(const std::mt19937& randgen);
  };

};

#endif
